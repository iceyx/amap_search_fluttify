//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler2.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapSearchFluttifyPlugin (SubHandler2)
- (NSDictionary<NSString*, Handler>*) getSubHandler2 {
    return @{
        @"AMapBusLine::get_viaBusStops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::get_viaBusStops");
            }
        
            // ref object
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapBusStop*>* result = ref.viaBusStops;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapBusLine::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::get_duration");
            }
        
            // ref object
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.duration;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistrict::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::get_adcode");
            }
        
            // ref object
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.adcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistrict::get_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::get_citycode");
            }
        
            // ref object
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.citycode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistrict::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::get_name");
            }
        
            // ref object
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistrict::get_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::get_level");
            }
        
            // ref object
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.level;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistrict::get_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::get_center");
            }
        
            // ref object
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapGeoPoint* result = ref.center;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistrict::get_districts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::get_districts");
            }
        
            // ref object
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapDistrict*>* result = ref.districts;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistrict::get_polylines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::get_polylines");
            }
        
            // ref object
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<NSString*>* result = ref.polylines;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTMC::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTMC::get_distance");
            }
        
            // ref object
            AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTMC::get_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTMC::get_status");
            }
        
            // ref object
            AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.status;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTMC::get_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTMC::get_polyline");
            }
        
            // ref object
            AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.polyline;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapStep::get_instruction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::get_instruction");
            }
        
            // ref object
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.instruction;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapStep::get_orientation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::get_orientation");
            }
        
            // ref object
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.orientation;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapStep::get_road": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::get_road");
            }
        
            // ref object
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.road;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapStep::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::get_distance");
            }
        
            // ref object
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapStep::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::get_duration");
            }
        
            // ref object
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.duration;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapStep::get_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::get_polyline");
            }
        
            // ref object
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.polyline;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapStep::get_action": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::get_action");
            }
        
            // ref object
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.action;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapStep::get_assistantAction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::get_assistantAction");
            }
        
            // ref object
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.assistantAction;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapStep::get_tolls": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::get_tolls");
            }
        
            // ref object
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.tolls;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapStep::get_tollDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::get_tollDistance");
            }
        
            // ref object
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.tollDistance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapStep::get_tollRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::get_tollRoad");
            }
        
            // ref object
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.tollRoad;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapStep::get_cities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::get_cities");
            }
        
            // ref object
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapCity*>* result = ref.cities;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapStep::get_tmcs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::get_tmcs");
            }
        
            // ref object
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapTMC*>* result = ref.tmcs;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapPath::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::get_distance");
            }
        
            // ref object
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPath::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::get_duration");
            }
        
            // ref object
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.duration;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPath::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::get_strategy");
            }
        
            // ref object
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.strategy;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapPath::get_steps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::get_steps");
            }
        
            // ref object
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapStep*>* result = ref.steps;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapPath::get_tolls": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::get_tolls");
            }
        
            // ref object
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.tolls;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPath::get_tollDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::get_tollDistance");
            }
        
            // ref object
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.tollDistance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPath::get_totalTrafficLights": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::get_totalTrafficLights");
            }
        
            // ref object
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.totalTrafficLights;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPath::get_restriction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::get_restriction");
            }
        
            // ref object
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.restriction;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureTimeInfoElement::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfoElement::get_duration");
            }
        
            // ref object
            AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.duration;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureTimeInfoElement::get_pathindex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfoElement::get_pathindex");
            }
        
            // ref object
            AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.pathindex;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureTimeInfoElement::get_restriction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfoElement::get_restriction");
            }
        
            // ref object
            AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.restriction;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureTimeInfoElement::get_tmcs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfoElement::get_tmcs");
            }
        
            // ref object
            AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapTMC*>* result = ref.tmcs;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureTimeInfo::get_startTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfo::get_startTime");
            }
        
            // ref object
            AMapFutureTimeInfo* ref = (AMapFutureTimeInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.startTime;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapFutureTimeInfo::get_elements": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfo::get_elements");
            }
        
            // ref object
            AMapFutureTimeInfo* ref = (AMapFutureTimeInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapFutureTimeInfoElement*>* result = ref.elements;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapWalking::get_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::get_origin");
            }
        
            // ref object
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapGeoPoint* result = ref.origin;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapWalking::get_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::get_destination");
            }
        
            // ref object
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapGeoPoint* result = ref.destination;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapWalking::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::get_distance");
            }
        
            // ref object
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapWalking::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::get_duration");
            }
        
            // ref object
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.duration;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapWalking::get_steps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::get_steps");
            }
        
            // ref object
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapStep*>* result = ref.steps;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapTaxi::get_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::get_origin");
            }
        
            // ref object
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapGeoPoint* result = ref.origin;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapTaxi::get_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::get_destination");
            }
        
            // ref object
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapGeoPoint* result = ref.destination;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapTaxi::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::get_distance");
            }
        
            // ref object
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTaxi::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::get_duration");
            }
        
            // ref object
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.duration;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTaxi::get_sname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::get_sname");
            }
        
            // ref object
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.sname;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTaxi::get_tname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::get_tname");
            }
        
            // ref object
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.tname;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailwayStation::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::get_uid");
            }
        
            // ref object
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.uid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailwayStation::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::get_name");
            }
        
            // ref object
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailwayStation::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::get_location");
            }
        
            // ref object
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailwayStation::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::get_adcode");
            }
        
            // ref object
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.adcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailwayStation::get_time": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::get_time");
            }
        
            // ref object
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.time;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailwayStation::get_wait": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::get_wait");
            }
        
            // ref object
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.wait;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailwayStation::get_isStart": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::get_isStart");
            }
        
            // ref object
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.isStart;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailwayStation::get_isEnd": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwayStation::get_isEnd");
            }
        
            // ref object
            AMapRailwayStation* ref = (AMapRailwayStation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.isEnd;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailwaySpace::get_code": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwaySpace::get_code");
            }
        
            // ref object
            AMapRailwaySpace* ref = (AMapRailwaySpace*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.code;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailwaySpace::get_cost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailwaySpace::get_cost");
            }
        
            // ref object
            AMapRailwaySpace* ref = (AMapRailwaySpace*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.cost;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailway::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::get_uid");
            }
        
            // ref object
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.uid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailway::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::get_name");
            }
        
            // ref object
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailway::get_trip": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::get_trip");
            }
        
            // ref object
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.trip;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailway::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::get_type");
            }
        
            // ref object
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.type;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailway::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::get_distance");
            }
        
            // ref object
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailway::get_time": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::get_time");
            }
        
            // ref object
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.time;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailway::get_departureStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::get_departureStation");
            }
        
            // ref object
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapRailwayStation* result = ref.departureStation;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailway::get_arrivalStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::get_arrivalStation");
            }
        
            // ref object
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapRailwayStation* result = ref.arrivalStation;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailway::get_spaces": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::get_spaces");
            }
        
            // ref object
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapRailwaySpace*>* result = ref.spaces;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailway::get_viaStops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::get_viaStops");
            }
        
            // ref object
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapRailwayStation*>* result = ref.viaStops;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapRailway::get_alters": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRailway::get_alters");
            }
        
            // ref object
            AMapRailway* ref = (AMapRailway*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapRailway*>* result = ref.alters;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapSegment::get_walking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::get_walking");
            }
        
            // ref object
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapWalking* result = ref.walking;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapSegment::get_buslines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::get_buslines");
            }
        
            // ref object
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapBusLine*>* result = ref.buslines;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapSegment::get_taxi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::get_taxi");
            }
        
            // ref object
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapTaxi* result = ref.taxi;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapSegment::get_railway": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::get_railway");
            }
        
            // ref object
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapRailway* result = ref.railway;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapSegment::get_enterName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::get_enterName");
            }
        
            // ref object
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.enterName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapSegment::get_enterLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::get_enterLocation");
            }
        
            // ref object
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapGeoPoint* result = ref.enterLocation;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapSegment::get_exitName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::get_exitName");
            }
        
            // ref object
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.exitName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapSegment::get_exitLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSegment::get_exitLocation");
            }
        
            // ref object
            AMapSegment* ref = (AMapSegment*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapGeoPoint* result = ref.exitLocation;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapTransit::get_cost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransit::get_cost");
            }
        
            // ref object
            AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.cost;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTransit::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransit::get_duration");
            }
        
            // ref object
            AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.duration;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTransit::get_nightflag": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransit::get_nightflag");
            }
        
            // ref object
            AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.nightflag;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTransit::get_walkingDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransit::get_walkingDistance");
            }
        
            // ref object
            AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.walkingDistance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTransit::get_segments": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransit::get_segments");
            }
        
            // ref object
            AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapSegment*>* result = ref.segments;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapTransit::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTransit::get_distance");
            }
        
            // ref object
            AMapTransit* ref = (AMapTransit*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoute::get_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoute::get_origin");
            }
        
            // ref object
            AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapGeoPoint* result = ref.origin;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoute::get_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoute::get_destination");
            }
        
            // ref object
            AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapGeoPoint* result = ref.destination;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoute::get_taxiCost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoute::get_taxiCost");
            }
        
            // ref object
            AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.taxiCost;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoute::get_paths": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoute::get_paths");
            }
        
            // ref object
            AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapPath*>* result = ref.paths;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapRoute::get_transits": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoute::get_transits");
            }
        
            // ref object
            AMapRoute* ref = (AMapRoute*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapTransit*>* result = ref.transits;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistanceResult::get_originID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceResult::get_originID");
            }
        
            // ref object
            AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.originID;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistanceResult::get_destID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceResult::get_destID");
            }
        
            // ref object
            AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.destID;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistanceResult::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceResult::get_distance");
            }
        
            // ref object
            AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistanceResult::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceResult::get_duration");
            }
        
            // ref object
            AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.duration;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistanceResult::get_info": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceResult::get_info");
            }
        
            // ref object
            AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.info;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapDistanceResult::get_code": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistanceResult::get_code");
            }
        
            // ref object
            AMapDistanceResult* ref = (AMapDistanceResult*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.code;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherLive::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::get_adcode");
            }
        
            // ref object
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.adcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherLive::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::get_province");
            }
        
            // ref object
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.province;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherLive::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::get_city");
            }
        
            // ref object
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.city;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherLive::get_weather": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::get_weather");
            }
        
            // ref object
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.weather;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherLive::get_temperature": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::get_temperature");
            }
        
            // ref object
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.temperature;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherLive::get_windDirection": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::get_windDirection");
            }
        
            // ref object
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.windDirection;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherLive::get_windPower": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::get_windPower");
            }
        
            // ref object
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.windPower;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherLive::get_humidity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::get_humidity");
            }
        
            // ref object
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.humidity;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherLive::get_reportTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherLive::get_reportTime");
            }
        
            // ref object
            AMapLocalWeatherLive* ref = (AMapLocalWeatherLive*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.reportTime;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalDayWeatherForecast::get_date": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::get_date");
            }
        
            // ref object
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.date;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalDayWeatherForecast::get_week": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::get_week");
            }
        
            // ref object
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.week;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalDayWeatherForecast::get_dayWeather": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::get_dayWeather");
            }
        
            // ref object
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.dayWeather;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalDayWeatherForecast::get_nightWeather": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::get_nightWeather");
            }
        
            // ref object
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.nightWeather;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalDayWeatherForecast::get_dayTemp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::get_dayTemp");
            }
        
            // ref object
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.dayTemp;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalDayWeatherForecast::get_nightTemp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::get_nightTemp");
            }
        
            // ref object
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.nightTemp;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalDayWeatherForecast::get_dayWind": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::get_dayWind");
            }
        
            // ref object
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.dayWind;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalDayWeatherForecast::get_nightWind": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::get_nightWind");
            }
        
            // ref object
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.nightWind;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalDayWeatherForecast::get_dayPower": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::get_dayPower");
            }
        
            // ref object
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.dayPower;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalDayWeatherForecast::get_nightPower": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalDayWeatherForecast::get_nightPower");
            }
        
            // ref object
            AMapLocalDayWeatherForecast* ref = (AMapLocalDayWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.nightPower;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherForecast::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherForecast::get_adcode");
            }
        
            // ref object
            AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.adcode;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherForecast::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherForecast::get_province");
            }
        
            // ref object
            AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.province;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherForecast::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherForecast::get_city");
            }
        
            // ref object
            AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.city;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherForecast::get_reportTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherForecast::get_reportTime");
            }
        
            // ref object
            AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.reportTime;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapLocalWeatherForecast::get_casts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapLocalWeatherForecast::get_casts");
            }
        
            // ref object
            AMapLocalWeatherForecast* ref = (AMapLocalWeatherForecast*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapLocalDayWeatherForecast*>* result = ref.casts;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbyUserInfo::get_userID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUserInfo::get_userID");
            }
        
            // ref object
            AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.userID;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbyUserInfo::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUserInfo::get_location");
            }
        
            // ref object
            AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbyUserInfo::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUserInfo::get_distance");
            }
        
            // ref object
            AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CGFloat result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbyUserInfo::get_updatetime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUserInfo::get_updatetime");
            }
        
            // ref object
            AMapNearbyUserInfo* ref = (AMapNearbyUserInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSTimeInterval result = ref.updatetime;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficEvaluation::get_evaluationDescription": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficEvaluation::get_evaluationDescription");
            }
        
            // ref object
            AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.evaluationDescription;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficEvaluation::get_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficEvaluation::get_status");
            }
        
            // ref object
            AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.status;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficEvaluation::get_expedite": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficEvaluation::get_expedite");
            }
        
            // ref object
            AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.expedite;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficEvaluation::get_congested": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficEvaluation::get_congested");
            }
        
            // ref object
            AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.congested;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficEvaluation::get_blocked": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficEvaluation::get_blocked");
            }
        
            // ref object
            AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.blocked;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficEvaluation::get_unknown": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficEvaluation::get_unknown");
            }
        
            // ref object
            AMapTrafficEvaluation* ref = (AMapTrafficEvaluation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.unknown;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficRoad::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficRoad::get_name");
            }
        
            // ref object
            AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficRoad::get_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficRoad::get_status");
            }
        
            // ref object
            AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.status;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficRoad::get_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficRoad::get_direction");
            }
        
            // ref object
            AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.direction;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficRoad::get_angle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficRoad::get_angle");
            }
        
            // ref object
            AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            float result = ref.angle;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficRoad::get_speed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficRoad::get_speed");
            }
        
            // ref object
            AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            float result = ref.speed;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficRoad::get_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficRoad::get_polyline");
            }
        
            // ref object
            AMapTrafficRoad* ref = (AMapTrafficRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.polyline;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficInfo::get_statusDescription": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficInfo::get_statusDescription");
            }
        
            // ref object
            AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.statusDescription;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficInfo::get_evaluation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficInfo::get_evaluation");
            }
        
            // ref object
            AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapTrafficEvaluation* result = ref.evaluation;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapTrafficInfo::get_roads": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTrafficInfo::get_roads");
            }
        
            // ref object
            AMapTrafficInfo* ref = (AMapTrafficInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapTrafficRoad*>* result = ref.roads;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudImage::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudImage::get_uid");
            }
        
            // ref object
            AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.uid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudImage::get_preurl": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudImage::get_preurl");
            }
        
            // ref object
            AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.preurl;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudImage::get_url": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudImage::get_url");
            }
        
            // ref object
            AMapCloudImage* ref = (AMapCloudImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.url;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOI::get_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::get_uid");
            }
        
            // ref object
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.uid;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOI::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::get_name");
            }
        
            // ref object
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOI::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::get_location");
            }
        
            // ref object
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapGeoPoint* result = ref.location;
        
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOI::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::get_address");
            }
        
            // ref object
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.address;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOI::get_customFields": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::get_customFields");
            }
        
            // ref object
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSDictionary* result = ref.customFields;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOI::get_createTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::get_createTime");
            }
        
            // ref object
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.createTime;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOI::get_updateTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::get_updateTime");
            }
        
            // ref object
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.updateTime;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOI::get_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::get_distance");
            }
        
            // ref object
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.distance;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapCloudPOI::get_images": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCloudPOI::get_images");
            }
        
            // ref object
            AMapCloudPOI* ref = (AMapCloudPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSArray<AMapCloudImage*>* result = ref.images;
        
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbyUploadInfo::get_userID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUploadInfo::get_userID");
            }
        
            // ref object
            AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.userID;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbyUploadInfo::get_coordinateType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUploadInfo::get_coordinateType");
            }
        
            // ref object
            AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapSearchCoordinateType result = ref.coordinateType;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbyUploadInfo::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbyUploadInfo::get_coordinate");
            }
        
            // ref object
            AMapNearbyUploadInfo* ref = (AMapNearbyUploadInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.coordinate;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbySearchManager::get_uploadTimeInterval": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchManager::get_uploadTimeInterval");
            }
        
            // ref object
            AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSTimeInterval result = ref.uploadTimeInterval;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapNearbySearchManager::get_isAutoUploading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNearbySearchManager::get_isAutoUploading");
            }
        
            // ref object
            AMapNearbySearchManager* ref = (AMapNearbySearchManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.isAutoUploading;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapSearchAPI::get_timeout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSearchAPI::get_timeout");
            }
        
            // ref object
            AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSInteger result = ref.timeout;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapSearchAPI::get_language": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSearchAPI::get_language");
            }
        
            // ref object
            AMapSearchAPI* ref = (AMapSearchAPI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            AMapSearchLanguage result = ref.language;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"AMapPOISearchBaseRequest::get_types_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.types;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOISearchBaseRequest::get_sortrule_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.sortrule;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOISearchBaseRequest::get_offset_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.offset;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOISearchBaseRequest::get_page_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.page;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOISearchBaseRequest::get_building_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.building;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOISearchBaseRequest::get_requireExtension_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BOOL result = ref.requireExtension;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOISearchBaseRequest::get_requireSubPOIs_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOISearchBaseRequest* ref = (AMapPOISearchBaseRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BOOL result = ref.requireSubPOIs;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIIDSearchRequest::get_uid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIIDSearchRequest* ref = (AMapPOIIDSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.uid;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIKeywordsSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.keywords;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIKeywordsSearchRequest::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.city;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIKeywordsSearchRequest::get_cityLimit_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BOOL result = ref.cityLimit;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIKeywordsSearchRequest::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIKeywordsSearchRequest* ref = (AMapPOIKeywordsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapGeoPoint* result = ref.location;
        
                // return a ref
                HEAP[[NSNumber numberWithLong: (result).hash]] = result;
                NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIAroundSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.keywords;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIAroundSearchRequest::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapGeoPoint* result = ref.location;
        
                // return a ref
                HEAP[[NSNumber numberWithLong: (result).hash]] = result;
                NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIAroundSearchRequest::get_radius_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.radius;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIAroundSearchRequest::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIAroundSearchRequest* ref = (AMapPOIAroundSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.city;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIPolygonSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIPolygonSearchRequest* ref = (AMapPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.keywords;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIPolygonSearchRequest::get_polygon_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIPolygonSearchRequest* ref = (AMapPOIPolygonSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapGeoPolygon* result = ref.polygon;
        
                // return a ref
                HEAP[[NSNumber numberWithLong: (result).hash]] = result;
                NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOISearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.count;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOISearchResponse::get_suggestion_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapSuggestion* result = ref.suggestion;
        
                // return a ref
                HEAP[[NSNumber numberWithLong: (result).hash]] = result;
                NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOISearchResponse::get_pois_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOISearchResponse* ref = (AMapPOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSArray<AMapPOI*>* result = ref.pois;
        
                // 返回值: 列表
                NSMutableArray* jsonableResult = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                    HEAP[[NSNumber numberWithLong: object.hash]] = object;
                }
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRoutePOISearchRequest::get_origin_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapGeoPoint* result = ref.origin;
        
                // return a ref
                HEAP[[NSNumber numberWithLong: (result).hash]] = result;
                NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRoutePOISearchRequest::get_destination_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapGeoPoint* result = ref.destination;
        
                // return a ref
                HEAP[[NSNumber numberWithLong: (result).hash]] = result;
                NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRoutePOISearchRequest::get_searchType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                AMapRoutePOISearchType result = ref.searchType;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRoutePOISearchRequest::get_strategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.strategy;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRoutePOISearchRequest::get_range_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.range;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRoutePOISearchRequest::get_polylineStr_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.polylineStr;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRoutePOISearchRequest::get_polyline_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRoutePOISearchRequest* ref = (AMapRoutePOISearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSArray<AMapGeoPoint*>* result = ref.polyline;
        
                // 返回值: 列表
                NSMutableArray* jsonableResult = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                    HEAP[[NSNumber numberWithLong: object.hash]] = object;
                }
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRoutePOISearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRoutePOISearchResponse* ref = (AMapRoutePOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.count;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRoutePOISearchResponse::get_pois_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRoutePOISearchResponse* ref = (AMapRoutePOISearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSArray<AMapRoutePOI*>* result = ref.pois;
        
                // 返回值: 列表
                NSMutableArray* jsonableResult = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                    HEAP[[NSNumber numberWithLong: object.hash]] = object;
                }
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapInputTipsSearchRequest::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.keywords;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapInputTipsSearchRequest::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.city;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapInputTipsSearchRequest::get_types_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.types;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapInputTipsSearchRequest::get_cityLimit_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BOOL result = ref.cityLimit;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapInputTipsSearchRequest::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapInputTipsSearchRequest* ref = (AMapInputTipsSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.location;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapInputTipsSearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapInputTipsSearchResponse* ref = (AMapInputTipsSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.count;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapInputTipsSearchResponse::get_tips_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapInputTipsSearchResponse* ref = (AMapInputTipsSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSArray<AMapTip*>* result = ref.tips;
        
                // 返回值: 列表
                NSMutableArray* jsonableResult = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                    HEAP[[NSNumber numberWithLong: object.hash]] = object;
                }
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapGeocodeSearchRequest::get_address_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapGeocodeSearchRequest* ref = (AMapGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.address;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapGeocodeSearchRequest::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapGeocodeSearchRequest* ref = (AMapGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.city;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapGeocodeSearchResponse::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapGeocodeSearchResponse* ref = (AMapGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSInteger result = ref.count;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapGeocodeSearchResponse::get_geocodes_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapGeocodeSearchResponse* ref = (AMapGeocodeSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSArray<AMapGeocode*>* result = ref.geocodes;
        
                // 返回值: 列表
                NSMutableArray* jsonableResult = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                    HEAP[[NSNumber numberWithLong: object.hash]] = object;
                }
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"AMapReGeocodeSearchRequest::get_requireExtension_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapReGeocodeSearchRequest* ref = (AMapReGeocodeSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BOOL result = ref.requireExtension;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
    };
}

@end
