//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler6.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapSearchFluttifyPlugin (SubHandler6)
- (NSDictionary<NSString*, Handler>*) getSubHandler6 {
    return @{
        @"AMapFutureRouteSearchRequest::set_parentId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::set_parentId");
            }
        
            // args
            // jsonable arg
            NSString* parentId = (NSString*) args[@"parentId"];
        
            // ref
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.parentId = parentId;
            methodResult(@"success");
        },
        
        @"AMapFutureRouteSearchRequest::set_plateProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::set_plateProvince");
            }
        
            // args
            // jsonable arg
            NSString* plateProvince = (NSString*) args[@"plateProvince"];
        
            // ref
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.plateProvince = plateProvince;
            methodResult(@"success");
        },
        
        @"AMapFutureRouteSearchRequest::set_plateNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::set_plateNumber");
            }
        
            // args
            // jsonable arg
            NSString* plateNumber = (NSString*) args[@"plateNumber"];
        
            // ref
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.plateNumber = plateNumber;
            methodResult(@"success");
        },
        
        @"AMapFutureRouteSearchRequest::set_cartype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchRequest::set_cartype");
            }
        
            // args
            // jsonable arg
            NSInteger cartype = [args[@"cartype"] longValue];
        
            // ref
            AMapFutureRouteSearchRequest* ref = (AMapFutureRouteSearchRequest*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cartype = cartype;
            methodResult(@"success");
        },
        
        @"AMapFutureRouteSearchResponse::set_paths": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchResponse::set_paths");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* pathsRefArray = (NSArray<NSNumber*> *) args[@"paths"];
            NSMutableArray<NSArray<AMapPath*>*>* paths = [NSMutableArray arrayWithCapacity:pathsRefArray.count];
            for (int __i__ = 0; __i__ < pathsRefArray.count; __i__++) {
                NSArray<AMapPath*>* item = (NSArray<AMapPath*>*) HEAP[[pathsRefArray objectAtIndex:__i__]];
                [paths addObject:item];
            }
        
            // ref
            AMapFutureRouteSearchResponse* ref = (AMapFutureRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.paths = paths;
            methodResult(@"success");
        },
        
        @"AMapFutureRouteSearchResponse::set_timeInfos": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureRouteSearchResponse::set_timeInfos");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* timeInfosRefArray = (NSArray<NSNumber*> *) args[@"timeInfos"];
            NSMutableArray<NSArray<AMapFutureTimeInfo*>*>* timeInfos = [NSMutableArray arrayWithCapacity:timeInfosRefArray.count];
            for (int __i__ = 0; __i__ < timeInfosRefArray.count; __i__++) {
                NSArray<AMapFutureTimeInfo*>* item = (NSArray<AMapFutureTimeInfo*>*) HEAP[[timeInfosRefArray objectAtIndex:__i__]];
                [timeInfos addObject:item];
            }
        
            // ref
            AMapFutureRouteSearchResponse* ref = (AMapFutureRouteSearchResponse*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.timeInfos = timeInfos;
            methodResult(@"success");
        },
        
        @"AMapGeoPoint::set_latitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeoPoint::set_latitude");
            }
        
            // args
            // jsonable arg
            CGFloat latitude = [args[@"latitude"] floatValue];
        
            // ref
            AMapGeoPoint* ref = (AMapGeoPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.latitude = latitude;
            methodResult(@"success");
        },
        
        @"AMapGeoPoint::set_longitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeoPoint::set_longitude");
            }
        
            // args
            // jsonable arg
            CGFloat longitude = [args[@"longitude"] floatValue];
        
            // ref
            AMapGeoPoint* ref = (AMapGeoPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.longitude = longitude;
            methodResult(@"success");
        },
        
        @"AMapGeoPolygon::set_points": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeoPolygon::set_points");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* pointsRefArray = (NSArray<NSNumber*> *) args[@"points"];
            NSMutableArray<NSArray<AMapGeoPoint*>*>* points = [NSMutableArray arrayWithCapacity:pointsRefArray.count];
            for (int __i__ = 0; __i__ < pointsRefArray.count; __i__++) {
                NSArray<AMapGeoPoint*>* item = (NSArray<AMapGeoPoint*>*) HEAP[[pointsRefArray objectAtIndex:__i__]];
                [points addObject:item];
            }
        
            // ref
            AMapGeoPolygon* ref = (AMapGeoPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.points = points;
            methodResult(@"success");
        },
        
        @"AMapCity::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCity::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapCity::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCity::set_citycode");
            }
        
            // args
            // jsonable arg
            NSString* citycode = (NSString*) args[@"citycode"];
        
            // ref
            AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.citycode = citycode;
            methodResult(@"success");
        },
        
        @"AMapCity::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCity::set_adcode");
            }
        
            // args
            // jsonable arg
            NSString* adcode = (NSString*) args[@"adcode"];
        
            // ref
            AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.adcode = adcode;
            methodResult(@"success");
        },
        
        @"AMapCity::set_num": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCity::set_num");
            }
        
            // args
            // jsonable arg
            NSInteger num = [args[@"num"] longValue];
        
            // ref
            AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.num = num;
            methodResult(@"success");
        },
        
        @"AMapCity::set_districts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapCity::set_districts");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* districtsRefArray = (NSArray<NSNumber*> *) args[@"districts"];
            NSMutableArray<NSArray<AMapDistrict*>*>* districts = [NSMutableArray arrayWithCapacity:districtsRefArray.count];
            for (int __i__ = 0; __i__ < districtsRefArray.count; __i__++) {
                NSArray<AMapDistrict*>* item = (NSArray<AMapDistrict*>*) HEAP[[districtsRefArray objectAtIndex:__i__]];
                [districts addObject:item];
            }
        
            // ref
            AMapCity* ref = (AMapCity*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.districts = districts;
            methodResult(@"success");
        },
        
        @"AMapSuggestion::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSuggestion::set_keywords");
            }
        
            // args
            // jsonable arg
            NSArray<NSString*>* keywords = (NSArray<NSString*>*) args[@"keywords"];
        
            // ref
            AMapSuggestion* ref = (AMapSuggestion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.keywords = keywords;
            methodResult(@"success");
        },
        
        @"AMapSuggestion::set_cities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSuggestion::set_cities");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* citiesRefArray = (NSArray<NSNumber*> *) args[@"cities"];
            NSMutableArray<NSArray<AMapCity*>*>* cities = [NSMutableArray arrayWithCapacity:citiesRefArray.count];
            for (int __i__ = 0; __i__ < citiesRefArray.count; __i__++) {
                NSArray<AMapCity*>* item = (NSArray<AMapCity*>*) HEAP[[citiesRefArray objectAtIndex:__i__]];
                [cities addObject:item];
            }
        
            // ref
            AMapSuggestion* ref = (AMapSuggestion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cities = cities;
            methodResult(@"success");
        },
        
        @"AMapTip::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapTip::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapTip::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::set_adcode");
            }
        
            // args
            // jsonable arg
            NSString* adcode = (NSString*) args[@"adcode"];
        
            // ref
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.adcode = adcode;
            methodResult(@"success");
        },
        
        @"AMapTip::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::set_district");
            }
        
            // args
            // jsonable arg
            NSString* district = (NSString*) args[@"district"];
        
            // ref
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.district = district;
            methodResult(@"success");
        },
        
        @"AMapTip::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::set_address");
            }
        
            // args
            // jsonable arg
            NSString* address = (NSString*) args[@"address"];
        
            // ref
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.address = address;
            methodResult(@"success");
        },
        
        @"AMapTip::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[args[@"location"]];
        
            // ref
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapTip::set_typecode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTip::set_typecode");
            }
        
            // args
            // jsonable arg
            NSString* typecode = (NSString*) args[@"typecode"];
        
            // ref
            AMapTip* ref = (AMapTip*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.typecode = typecode;
            methodResult(@"success");
        },
        
        @"AMapImage::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapImage::set_title");
            }
        
            // args
            // jsonable arg
            NSString* title = (NSString*) args[@"title"];
        
            // ref
            AMapImage* ref = (AMapImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.title = title;
            methodResult(@"success");
        },
        
        @"AMapImage::set_url": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapImage::set_url");
            }
        
            // args
            // jsonable arg
            NSString* url = (NSString*) args[@"url"];
        
            // ref
            AMapImage* ref = (AMapImage*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.url = url;
            methodResult(@"success");
        },
        
        @"AMapPOIExtension::set_rating": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIExtension::set_rating");
            }
        
            // args
            // jsonable arg
            CGFloat rating = [args[@"rating"] floatValue];
        
            // ref
            AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.rating = rating;
            methodResult(@"success");
        },
        
        @"AMapPOIExtension::set_cost": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIExtension::set_cost");
            }
        
            // args
            // jsonable arg
            CGFloat cost = [args[@"cost"] floatValue];
        
            // ref
            AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cost = cost;
            methodResult(@"success");
        },
        
        @"AMapPOIExtension::set_openTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIExtension::set_openTime");
            }
        
            // args
            // jsonable arg
            NSString* openTime = (NSString*) args[@"openTime"];
        
            // ref
            AMapPOIExtension* ref = (AMapPOIExtension*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.openTime = openTime;
            methodResult(@"success");
        },
        
        @"AMapIndoorData::set_floor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapIndoorData::set_floor");
            }
        
            // args
            // jsonable arg
            NSInteger floor = [args[@"floor"] longValue];
        
            // ref
            AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.floor = floor;
            methodResult(@"success");
        },
        
        @"AMapIndoorData::set_floorName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapIndoorData::set_floorName");
            }
        
            // args
            // jsonable arg
            NSString* floorName = (NSString*) args[@"floorName"];
        
            // ref
            AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.floorName = floorName;
            methodResult(@"success");
        },
        
        @"AMapIndoorData::set_pid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapIndoorData::set_pid");
            }
        
            // args
            // jsonable arg
            NSString* pid = (NSString*) args[@"pid"];
        
            // ref
            AMapIndoorData* ref = (AMapIndoorData*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.pid = pid;
            methodResult(@"success");
        },
        
        @"AMapSubPOI::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapSubPOI::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapSubPOI::set_sname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::set_sname");
            }
        
            // args
            // jsonable arg
            NSString* sname = (NSString*) args[@"sname"];
        
            // ref
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.sname = sname;
            methodResult(@"success");
        },
        
        @"AMapSubPOI::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[args[@"location"]];
        
            // ref
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapSubPOI::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::set_address");
            }
        
            // args
            // jsonable arg
            NSString* address = (NSString*) args[@"address"];
        
            // ref
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.address = address;
            methodResult(@"success");
        },
        
        @"AMapSubPOI::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] longValue];
        
            // ref
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapSubPOI::set_subtype": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapSubPOI::set_subtype");
            }
        
            // args
            // jsonable arg
            NSString* subtype = (NSString*) args[@"subtype"];
        
            // ref
            AMapSubPOI* ref = (AMapSubPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.subtype = subtype;
            methodResult(@"success");
        },
        
        @"AMapRoutePOI::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOI::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapRoutePOI::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOI::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapRoutePOI::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOI::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[args[@"location"]];
        
            // ref
            AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapRoutePOI::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOI::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] longValue];
        
            // ref
            AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapRoutePOI::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoutePOI::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] longValue];
        
            // ref
            AMapRoutePOI* ref = (AMapRoutePOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_type");
            }
        
            // args
            // jsonable arg
            NSString* type = (NSString*) args[@"type"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.type = type;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_typecode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_typecode");
            }
        
            // args
            // jsonable arg
            NSString* typecode = (NSString*) args[@"typecode"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.typecode = typecode;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[args[@"location"]];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_address");
            }
        
            // args
            // jsonable arg
            NSString* address = (NSString*) args[@"address"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.address = address;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_tel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_tel");
            }
        
            // args
            // jsonable arg
            NSString* tel = (NSString*) args[@"tel"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tel = tel;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] longValue];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_parkingType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_parkingType");
            }
        
            // args
            // jsonable arg
            NSString* parkingType = (NSString*) args[@"parkingType"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.parkingType = parkingType;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_shopID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_shopID");
            }
        
            // args
            // jsonable arg
            NSString* shopID = (NSString*) args[@"shopID"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.shopID = shopID;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_postcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_postcode");
            }
        
            // args
            // jsonable arg
            NSString* postcode = (NSString*) args[@"postcode"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.postcode = postcode;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_website": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_website");
            }
        
            // args
            // jsonable arg
            NSString* website = (NSString*) args[@"website"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.website = website;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_email": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_email");
            }
        
            // args
            // jsonable arg
            NSString* email = (NSString*) args[@"email"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.email = email;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_province");
            }
        
            // args
            // jsonable arg
            NSString* province = (NSString*) args[@"province"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.province = province;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_pcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_pcode");
            }
        
            // args
            // jsonable arg
            NSString* pcode = (NSString*) args[@"pcode"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.pcode = pcode;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_citycode");
            }
        
            // args
            // jsonable arg
            NSString* citycode = (NSString*) args[@"citycode"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.citycode = citycode;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_district");
            }
        
            // args
            // jsonable arg
            NSString* district = (NSString*) args[@"district"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.district = district;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_adcode");
            }
        
            // args
            // jsonable arg
            NSString* adcode = (NSString*) args[@"adcode"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.adcode = adcode;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_gridcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_gridcode");
            }
        
            // args
            // jsonable arg
            NSString* gridcode = (NSString*) args[@"gridcode"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.gridcode = gridcode;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_enterLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_enterLocation");
            }
        
            // args
            // ref arg
            AMapGeoPoint* enterLocation = (AMapGeoPoint*) HEAP[args[@"enterLocation"]];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.enterLocation = enterLocation;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_exitLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_exitLocation");
            }
        
            // args
            // ref arg
            AMapGeoPoint* exitLocation = (AMapGeoPoint*) HEAP[args[@"exitLocation"]];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.exitLocation = exitLocation;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_direction");
            }
        
            // args
            // jsonable arg
            NSString* direction = (NSString*) args[@"direction"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.direction = direction;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_hasIndoorMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_hasIndoorMap");
            }
        
            // args
            // jsonable arg
            BOOL hasIndoorMap = [args[@"hasIndoorMap"] boolValue];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.hasIndoorMap = hasIndoorMap;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_businessArea": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_businessArea");
            }
        
            // args
            // jsonable arg
            NSString* businessArea = (NSString*) args[@"businessArea"];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.businessArea = businessArea;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_indoorData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_indoorData");
            }
        
            // args
            // ref arg
            AMapIndoorData* indoorData = (AMapIndoorData*) HEAP[args[@"indoorData"]];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.indoorData = indoorData;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_subPOIs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_subPOIs");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* subPOIsRefArray = (NSArray<NSNumber*> *) args[@"subPOIs"];
            NSMutableArray<NSArray<AMapSubPOI*>*>* subPOIs = [NSMutableArray arrayWithCapacity:subPOIsRefArray.count];
            for (int __i__ = 0; __i__ < subPOIsRefArray.count; __i__++) {
                NSArray<AMapSubPOI*>* item = (NSArray<AMapSubPOI*>*) HEAP[[subPOIsRefArray objectAtIndex:__i__]];
                [subPOIs addObject:item];
            }
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.subPOIs = subPOIs;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_images": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_images");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* imagesRefArray = (NSArray<NSNumber*> *) args[@"images"];
            NSMutableArray<NSArray<AMapImage*>*>* images = [NSMutableArray arrayWithCapacity:imagesRefArray.count];
            for (int __i__ = 0; __i__ < imagesRefArray.count; __i__++) {
                NSArray<AMapImage*>* item = (NSArray<AMapImage*>*) HEAP[[imagesRefArray objectAtIndex:__i__]];
                [images addObject:item];
            }
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.images = images;
            methodResult(@"success");
        },
        
        @"AMapPOI::set_extensionInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOI::set_extensionInfo");
            }
        
            // args
            // ref arg
            AMapPOIExtension* extensionInfo = (AMapPOIExtension*) HEAP[args[@"extensionInfo"]];
        
            // ref
            AMapPOI* ref = (AMapPOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.extensionInfo = extensionInfo;
            methodResult(@"success");
        },
        
        @"AMapAOI::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAOI::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapAOI::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAOI::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapAOI::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAOI::set_adcode");
            }
        
            // args
            // jsonable arg
            NSString* adcode = (NSString*) args[@"adcode"];
        
            // ref
            AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.adcode = adcode;
            methodResult(@"success");
        },
        
        @"AMapAOI::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAOI::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[args[@"location"]];
        
            // ref
            AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapAOI::set_area": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAOI::set_area");
            }
        
            // args
            // jsonable arg
            CGFloat area = [args[@"area"] floatValue];
        
            // ref
            AMapAOI* ref = (AMapAOI*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.area = area;
            methodResult(@"success");
        },
        
        @"AMapRoad::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoad::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapRoad::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoad::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapRoad::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoad::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] longValue];
        
            // ref
            AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapRoad::set_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoad::set_direction");
            }
        
            // args
            // jsonable arg
            NSString* direction = (NSString*) args[@"direction"];
        
            // ref
            AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.direction = direction;
            methodResult(@"success");
        },
        
        @"AMapRoad::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoad::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[args[@"location"]];
        
            // ref
            AMapRoad* ref = (AMapRoad*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapRoadInter::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] longValue];
        
            // ref
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapRoadInter::set_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::set_direction");
            }
        
            // args
            // jsonable arg
            NSString* direction = (NSString*) args[@"direction"];
        
            // ref
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.direction = direction;
            methodResult(@"success");
        },
        
        @"AMapRoadInter::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[args[@"location"]];
        
            // ref
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapRoadInter::set_firstId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::set_firstId");
            }
        
            // args
            // jsonable arg
            NSString* firstId = (NSString*) args[@"firstId"];
        
            // ref
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.firstId = firstId;
            methodResult(@"success");
        },
        
        @"AMapRoadInter::set_firstName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::set_firstName");
            }
        
            // args
            // jsonable arg
            NSString* firstName = (NSString*) args[@"firstName"];
        
            // ref
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.firstName = firstName;
            methodResult(@"success");
        },
        
        @"AMapRoadInter::set_secondId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::set_secondId");
            }
        
            // args
            // jsonable arg
            NSString* secondId = (NSString*) args[@"secondId"];
        
            // ref
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.secondId = secondId;
            methodResult(@"success");
        },
        
        @"AMapRoadInter::set_secondName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRoadInter::set_secondName");
            }
        
            // args
            // jsonable arg
            NSString* secondName = (NSString*) args[@"secondName"];
        
            // ref
            AMapRoadInter* ref = (AMapRoadInter*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.secondName = secondName;
            methodResult(@"success");
        },
        
        @"AMapStreetNumber::set_street": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStreetNumber::set_street");
            }
        
            // args
            // jsonable arg
            NSString* street = (NSString*) args[@"street"];
        
            // ref
            AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.street = street;
            methodResult(@"success");
        },
        
        @"AMapStreetNumber::set_number": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStreetNumber::set_number");
            }
        
            // args
            // jsonable arg
            NSString* number = (NSString*) args[@"number"];
        
            // ref
            AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.number = number;
            methodResult(@"success");
        },
        
        @"AMapStreetNumber::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStreetNumber::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[args[@"location"]];
        
            // ref
            AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapStreetNumber::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStreetNumber::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] longValue];
        
            // ref
            AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapStreetNumber::set_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStreetNumber::set_direction");
            }
        
            // args
            // jsonable arg
            NSString* direction = (NSString*) args[@"direction"];
        
            // ref
            AMapStreetNumber* ref = (AMapStreetNumber*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.direction = direction;
            methodResult(@"success");
        },
        
        @"AMapBusinessArea::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusinessArea::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapBusinessArea* ref = (AMapBusinessArea*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapBusinessArea::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusinessArea::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[args[@"location"]];
        
            // ref
            AMapBusinessArea* ref = (AMapBusinessArea*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapAddressComponent::set_country": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::set_country");
            }
        
            // args
            // jsonable arg
            NSString* country = (NSString*) args[@"country"];
        
            // ref
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.country = country;
            methodResult(@"success");
        },
        
        @"AMapAddressComponent::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::set_province");
            }
        
            // args
            // jsonable arg
            NSString* province = (NSString*) args[@"province"];
        
            // ref
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.province = province;
            methodResult(@"success");
        },
        
        @"AMapAddressComponent::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapAddressComponent::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::set_citycode");
            }
        
            // args
            // jsonable arg
            NSString* citycode = (NSString*) args[@"citycode"];
        
            // ref
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.citycode = citycode;
            methodResult(@"success");
        },
        
        @"AMapAddressComponent::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::set_district");
            }
        
            // args
            // jsonable arg
            NSString* district = (NSString*) args[@"district"];
        
            // ref
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.district = district;
            methodResult(@"success");
        },
        
        @"AMapAddressComponent::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::set_adcode");
            }
        
            // args
            // jsonable arg
            NSString* adcode = (NSString*) args[@"adcode"];
        
            // ref
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.adcode = adcode;
            methodResult(@"success");
        },
        
        @"AMapAddressComponent::set_township": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::set_township");
            }
        
            // args
            // jsonable arg
            NSString* township = (NSString*) args[@"township"];
        
            // ref
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.township = township;
            methodResult(@"success");
        },
        
        @"AMapAddressComponent::set_towncode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::set_towncode");
            }
        
            // args
            // jsonable arg
            NSString* towncode = (NSString*) args[@"towncode"];
        
            // ref
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.towncode = towncode;
            methodResult(@"success");
        },
        
        @"AMapAddressComponent::set_neighborhood": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::set_neighborhood");
            }
        
            // args
            // jsonable arg
            NSString* neighborhood = (NSString*) args[@"neighborhood"];
        
            // ref
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.neighborhood = neighborhood;
            methodResult(@"success");
        },
        
        @"AMapAddressComponent::set_building": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::set_building");
            }
        
            // args
            // jsonable arg
            NSString* building = (NSString*) args[@"building"];
        
            // ref
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.building = building;
            methodResult(@"success");
        },
        
        @"AMapAddressComponent::set_streetNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::set_streetNumber");
            }
        
            // args
            // ref arg
            AMapStreetNumber* streetNumber = (AMapStreetNumber*) HEAP[args[@"streetNumber"]];
        
            // ref
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.streetNumber = streetNumber;
            methodResult(@"success");
        },
        
        @"AMapAddressComponent::set_businessAreas": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapAddressComponent::set_businessAreas");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* businessAreasRefArray = (NSArray<NSNumber*> *) args[@"businessAreas"];
            NSMutableArray<NSArray<AMapBusinessArea*>*>* businessAreas = [NSMutableArray arrayWithCapacity:businessAreasRefArray.count];
            for (int __i__ = 0; __i__ < businessAreasRefArray.count; __i__++) {
                NSArray<AMapBusinessArea*>* item = (NSArray<AMapBusinessArea*>*) HEAP[[businessAreasRefArray objectAtIndex:__i__]];
                [businessAreas addObject:item];
            }
        
            // ref
            AMapAddressComponent* ref = (AMapAddressComponent*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.businessAreas = businessAreas;
            methodResult(@"success");
        },
        
        @"AMapReGeocode::set_formattedAddress": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocode::set_formattedAddress");
            }
        
            // args
            // jsonable arg
            NSString* formattedAddress = (NSString*) args[@"formattedAddress"];
        
            // ref
            AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.formattedAddress = formattedAddress;
            methodResult(@"success");
        },
        
        @"AMapReGeocode::set_addressComponent": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocode::set_addressComponent");
            }
        
            // args
            // ref arg
            AMapAddressComponent* addressComponent = (AMapAddressComponent*) HEAP[args[@"addressComponent"]];
        
            // ref
            AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.addressComponent = addressComponent;
            methodResult(@"success");
        },
        
        @"AMapReGeocode::set_roads": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocode::set_roads");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* roadsRefArray = (NSArray<NSNumber*> *) args[@"roads"];
            NSMutableArray<NSArray<AMapRoad*>*>* roads = [NSMutableArray arrayWithCapacity:roadsRefArray.count];
            for (int __i__ = 0; __i__ < roadsRefArray.count; __i__++) {
                NSArray<AMapRoad*>* item = (NSArray<AMapRoad*>*) HEAP[[roadsRefArray objectAtIndex:__i__]];
                [roads addObject:item];
            }
        
            // ref
            AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.roads = roads;
            methodResult(@"success");
        },
        
        @"AMapReGeocode::set_roadinters": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocode::set_roadinters");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* roadintersRefArray = (NSArray<NSNumber*> *) args[@"roadinters"];
            NSMutableArray<NSArray<AMapRoadInter*>*>* roadinters = [NSMutableArray arrayWithCapacity:roadintersRefArray.count];
            for (int __i__ = 0; __i__ < roadintersRefArray.count; __i__++) {
                NSArray<AMapRoadInter*>* item = (NSArray<AMapRoadInter*>*) HEAP[[roadintersRefArray objectAtIndex:__i__]];
                [roadinters addObject:item];
            }
        
            // ref
            AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.roadinters = roadinters;
            methodResult(@"success");
        },
        
        @"AMapReGeocode::set_pois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocode::set_pois");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* poisRefArray = (NSArray<NSNumber*> *) args[@"pois"];
            NSMutableArray<NSArray<AMapPOI*>*>* pois = [NSMutableArray arrayWithCapacity:poisRefArray.count];
            for (int __i__ = 0; __i__ < poisRefArray.count; __i__++) {
                NSArray<AMapPOI*>* item = (NSArray<AMapPOI*>*) HEAP[[poisRefArray objectAtIndex:__i__]];
                [pois addObject:item];
            }
        
            // ref
            AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.pois = pois;
            methodResult(@"success");
        },
        
        @"AMapReGeocode::set_aois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapReGeocode::set_aois");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* aoisRefArray = (NSArray<NSNumber*> *) args[@"aois"];
            NSMutableArray<NSArray<AMapAOI*>*>* aois = [NSMutableArray arrayWithCapacity:aoisRefArray.count];
            for (int __i__ = 0; __i__ < aoisRefArray.count; __i__++) {
                NSArray<AMapAOI*>* item = (NSArray<AMapAOI*>*) HEAP[[aoisRefArray objectAtIndex:__i__]];
                [aois addObject:item];
            }
        
            // ref
            AMapReGeocode* ref = (AMapReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.aois = aois;
            methodResult(@"success");
        },
        
        @"AMapGeocode::set_formattedAddress": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocode::set_formattedAddress");
            }
        
            // args
            // jsonable arg
            NSString* formattedAddress = (NSString*) args[@"formattedAddress"];
        
            // ref
            AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.formattedAddress = formattedAddress;
            methodResult(@"success");
        },
        
        @"AMapGeocode::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocode::set_province");
            }
        
            // args
            // jsonable arg
            NSString* province = (NSString*) args[@"province"];
        
            // ref
            AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.province = province;
            methodResult(@"success");
        },
        
        @"AMapGeocode::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocode::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"AMapGeocode::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocode::set_citycode");
            }
        
            // args
            // jsonable arg
            NSString* citycode = (NSString*) args[@"citycode"];
        
            // ref
            AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.citycode = citycode;
            methodResult(@"success");
        },
        
        @"AMapGeocode::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocode::set_district");
            }
        
            // args
            // jsonable arg
            NSString* district = (NSString*) args[@"district"];
        
            // ref
            AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.district = district;
            methodResult(@"success");
        },
        
        @"AMapGeocode::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocode::set_adcode");
            }
        
            // args
            // jsonable arg
            NSString* adcode = (NSString*) args[@"adcode"];
        
            // ref
            AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.adcode = adcode;
            methodResult(@"success");
        },
        
        @"AMapGeocode::set_township": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocode::set_township");
            }
        
            // args
            // jsonable arg
            NSString* township = (NSString*) args[@"township"];
        
            // ref
            AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.township = township;
            methodResult(@"success");
        },
        
        @"AMapGeocode::set_neighborhood": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocode::set_neighborhood");
            }
        
            // args
            // jsonable arg
            NSString* neighborhood = (NSString*) args[@"neighborhood"];
        
            // ref
            AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.neighborhood = neighborhood;
            methodResult(@"success");
        },
        
        @"AMapGeocode::set_building": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocode::set_building");
            }
        
            // args
            // jsonable arg
            NSString* building = (NSString*) args[@"building"];
        
            // ref
            AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.building = building;
            methodResult(@"success");
        },
        
        @"AMapGeocode::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocode::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[args[@"location"]];
        
            // ref
            AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapGeocode::set_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapGeocode::set_level");
            }
        
            // args
            // jsonable arg
            NSString* level = (NSString*) args[@"level"];
        
            // ref
            AMapGeocode* ref = (AMapGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.level = level;
            methodResult(@"success");
        },
        
        @"AMapBusStop::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStop::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapBusStop::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStop::set_adcode");
            }
        
            // args
            // jsonable arg
            NSString* adcode = (NSString*) args[@"adcode"];
        
            // ref
            AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.adcode = adcode;
            methodResult(@"success");
        },
        
        @"AMapBusStop::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStop::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapBusStop::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStop::set_citycode");
            }
        
            // args
            // jsonable arg
            NSString* citycode = (NSString*) args[@"citycode"];
        
            // ref
            AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.citycode = citycode;
            methodResult(@"success");
        },
        
        @"AMapBusStop::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStop::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[args[@"location"]];
        
            // ref
            AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapBusStop::set_buslines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStop::set_buslines");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* buslinesRefArray = (NSArray<NSNumber*> *) args[@"buslines"];
            NSMutableArray<NSArray<AMapBusLine*>*>* buslines = [NSMutableArray arrayWithCapacity:buslinesRefArray.count];
            for (int __i__ = 0; __i__ < buslinesRefArray.count; __i__++) {
                NSArray<AMapBusLine*>* item = (NSArray<AMapBusLine*>*) HEAP[[buslinesRefArray objectAtIndex:__i__]];
                [buslines addObject:item];
            }
        
            // ref
            AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.buslines = buslines;
            methodResult(@"success");
        },
        
        @"AMapBusStop::set_sequence": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusStop::set_sequence");
            }
        
            // args
            // jsonable arg
            NSString* sequence = (NSString*) args[@"sequence"];
        
            // ref
            AMapBusStop* ref = (AMapBusStop*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.sequence = sequence;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_uid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_uid");
            }
        
            // args
            // jsonable arg
            NSString* uid = (NSString*) args[@"uid"];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.uid = uid;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_type");
            }
        
            // args
            // jsonable arg
            NSString* type = (NSString*) args[@"type"];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.type = type;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_polyline");
            }
        
            // args
            // jsonable arg
            NSString* polyline = (NSString*) args[@"polyline"];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.polyline = polyline;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_citycode");
            }
        
            // args
            // jsonable arg
            NSString* citycode = (NSString*) args[@"citycode"];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.citycode = citycode;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_startStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_startStop");
            }
        
            // args
            // jsonable arg
            NSString* startStop = (NSString*) args[@"startStop"];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.startStop = startStop;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_endStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_endStop");
            }
        
            // args
            // jsonable arg
            NSString* endStop = (NSString*) args[@"endStop"];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.endStop = endStop;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_location");
            }
        
            // args
            // ref arg
            AMapGeoPoint* location = (AMapGeoPoint*) HEAP[args[@"location"]];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_startTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_startTime");
            }
        
            // args
            // jsonable arg
            NSString* startTime = (NSString*) args[@"startTime"];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.startTime = startTime;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_endTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_endTime");
            }
        
            // args
            // jsonable arg
            NSString* endTime = (NSString*) args[@"endTime"];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.endTime = endTime;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_company": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_company");
            }
        
            // args
            // jsonable arg
            NSString* company = (NSString*) args[@"company"];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.company = company;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_distance");
            }
        
            // args
            // jsonable arg
            CGFloat distance = [args[@"distance"] floatValue];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_basicPrice": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_basicPrice");
            }
        
            // args
            // jsonable arg
            CGFloat basicPrice = [args[@"basicPrice"] floatValue];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.basicPrice = basicPrice;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_totalPrice": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_totalPrice");
            }
        
            // args
            // jsonable arg
            CGFloat totalPrice = [args[@"totalPrice"] floatValue];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.totalPrice = totalPrice;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_bounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_bounds");
            }
        
            // args
            // ref arg
            AMapGeoPolygon* bounds = (AMapGeoPolygon*) HEAP[args[@"bounds"]];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.bounds = bounds;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_busStops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_busStops");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* busStopsRefArray = (NSArray<NSNumber*> *) args[@"busStops"];
            NSMutableArray<NSArray<AMapBusStop*>*>* busStops = [NSMutableArray arrayWithCapacity:busStopsRefArray.count];
            for (int __i__ = 0; __i__ < busStopsRefArray.count; __i__++) {
                NSArray<AMapBusStop*>* item = (NSArray<AMapBusStop*>*) HEAP[[busStopsRefArray objectAtIndex:__i__]];
                [busStops addObject:item];
            }
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.busStops = busStops;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_departureStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_departureStop");
            }
        
            // args
            // ref arg
            AMapBusStop* departureStop = (AMapBusStop*) HEAP[args[@"departureStop"]];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.departureStop = departureStop;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_arrivalStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_arrivalStop");
            }
        
            // args
            // ref arg
            AMapBusStop* arrivalStop = (AMapBusStop*) HEAP[args[@"arrivalStop"]];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.arrivalStop = arrivalStop;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_viaBusStops": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_viaBusStops");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* viaBusStopsRefArray = (NSArray<NSNumber*> *) args[@"viaBusStops"];
            NSMutableArray<NSArray<AMapBusStop*>*>* viaBusStops = [NSMutableArray arrayWithCapacity:viaBusStopsRefArray.count];
            for (int __i__ = 0; __i__ < viaBusStopsRefArray.count; __i__++) {
                NSArray<AMapBusStop*>* item = (NSArray<AMapBusStop*>*) HEAP[[viaBusStopsRefArray objectAtIndex:__i__]];
                [viaBusStops addObject:item];
            }
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.viaBusStops = viaBusStops;
            methodResult(@"success");
        },
        
        @"AMapBusLine::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapBusLine::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] longValue];
        
            // ref
            AMapBusLine* ref = (AMapBusLine*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapDistrict::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::set_adcode");
            }
        
            // args
            // jsonable arg
            NSString* adcode = (NSString*) args[@"adcode"];
        
            // ref
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.adcode = adcode;
            methodResult(@"success");
        },
        
        @"AMapDistrict::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::set_citycode");
            }
        
            // args
            // jsonable arg
            NSString* citycode = (NSString*) args[@"citycode"];
        
            // ref
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.citycode = citycode;
            methodResult(@"success");
        },
        
        @"AMapDistrict::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"AMapDistrict::set_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::set_level");
            }
        
            // args
            // jsonable arg
            NSString* level = (NSString*) args[@"level"];
        
            // ref
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.level = level;
            methodResult(@"success");
        },
        
        @"AMapDistrict::set_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::set_center");
            }
        
            // args
            // ref arg
            AMapGeoPoint* center = (AMapGeoPoint*) HEAP[args[@"center"]];
        
            // ref
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.center = center;
            methodResult(@"success");
        },
        
        @"AMapDistrict::set_districts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::set_districts");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* districtsRefArray = (NSArray<NSNumber*> *) args[@"districts"];
            NSMutableArray<NSArray<AMapDistrict*>*>* districts = [NSMutableArray arrayWithCapacity:districtsRefArray.count];
            for (int __i__ = 0; __i__ < districtsRefArray.count; __i__++) {
                NSArray<AMapDistrict*>* item = (NSArray<AMapDistrict*>*) HEAP[[districtsRefArray objectAtIndex:__i__]];
                [districts addObject:item];
            }
        
            // ref
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.districts = districts;
            methodResult(@"success");
        },
        
        @"AMapDistrict::set_polylines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapDistrict::set_polylines");
            }
        
            // args
            // jsonable arg
            NSArray<NSString*>* polylines = (NSArray<NSString*>*) args[@"polylines"];
        
            // ref
            AMapDistrict* ref = (AMapDistrict*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.polylines = polylines;
            methodResult(@"success");
        },
        
        @"AMapTMC::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTMC::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] longValue];
        
            // ref
            AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapTMC::set_status": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTMC::set_status");
            }
        
            // args
            // jsonable arg
            NSString* status = (NSString*) args[@"status"];
        
            // ref
            AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.status = status;
            methodResult(@"success");
        },
        
        @"AMapTMC::set_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTMC::set_polyline");
            }
        
            // args
            // jsonable arg
            NSString* polyline = (NSString*) args[@"polyline"];
        
            // ref
            AMapTMC* ref = (AMapTMC*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.polyline = polyline;
            methodResult(@"success");
        },
        
        @"AMapStep::set_instruction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_instruction");
            }
        
            // args
            // jsonable arg
            NSString* instruction = (NSString*) args[@"instruction"];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.instruction = instruction;
            methodResult(@"success");
        },
        
        @"AMapStep::set_orientation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_orientation");
            }
        
            // args
            // jsonable arg
            NSString* orientation = (NSString*) args[@"orientation"];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.orientation = orientation;
            methodResult(@"success");
        },
        
        @"AMapStep::set_road": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_road");
            }
        
            // args
            // jsonable arg
            NSString* road = (NSString*) args[@"road"];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.road = road;
            methodResult(@"success");
        },
        
        @"AMapStep::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] longValue];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapStep::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] longValue];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapStep::set_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_polyline");
            }
        
            // args
            // jsonable arg
            NSString* polyline = (NSString*) args[@"polyline"];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.polyline = polyline;
            methodResult(@"success");
        },
        
        @"AMapStep::set_action": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_action");
            }
        
            // args
            // jsonable arg
            NSString* action = (NSString*) args[@"action"];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.action = action;
            methodResult(@"success");
        },
        
        @"AMapStep::set_assistantAction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_assistantAction");
            }
        
            // args
            // jsonable arg
            NSString* assistantAction = (NSString*) args[@"assistantAction"];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.assistantAction = assistantAction;
            methodResult(@"success");
        },
        
        @"AMapStep::set_tolls": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_tolls");
            }
        
            // args
            // jsonable arg
            CGFloat tolls = [args[@"tolls"] floatValue];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tolls = tolls;
            methodResult(@"success");
        },
        
        @"AMapStep::set_tollDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_tollDistance");
            }
        
            // args
            // jsonable arg
            NSInteger tollDistance = [args[@"tollDistance"] longValue];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tollDistance = tollDistance;
            methodResult(@"success");
        },
        
        @"AMapStep::set_tollRoad": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_tollRoad");
            }
        
            // args
            // jsonable arg
            NSString* tollRoad = (NSString*) args[@"tollRoad"];
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tollRoad = tollRoad;
            methodResult(@"success");
        },
        
        @"AMapStep::set_cities": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_cities");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* citiesRefArray = (NSArray<NSNumber*> *) args[@"cities"];
            NSMutableArray<NSArray<AMapCity*>*>* cities = [NSMutableArray arrayWithCapacity:citiesRefArray.count];
            for (int __i__ = 0; __i__ < citiesRefArray.count; __i__++) {
                NSArray<AMapCity*>* item = (NSArray<AMapCity*>*) HEAP[[citiesRefArray objectAtIndex:__i__]];
                [cities addObject:item];
            }
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cities = cities;
            methodResult(@"success");
        },
        
        @"AMapStep::set_tmcs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapStep::set_tmcs");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* tmcsRefArray = (NSArray<NSNumber*> *) args[@"tmcs"];
            NSMutableArray<NSArray<AMapTMC*>*>* tmcs = [NSMutableArray arrayWithCapacity:tmcsRefArray.count];
            for (int __i__ = 0; __i__ < tmcsRefArray.count; __i__++) {
                NSArray<AMapTMC*>* item = (NSArray<AMapTMC*>*) HEAP[[tmcsRefArray objectAtIndex:__i__]];
                [tmcs addObject:item];
            }
        
            // ref
            AMapStep* ref = (AMapStep*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tmcs = tmcs;
            methodResult(@"success");
        },
        
        @"AMapPath::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] longValue];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapPath::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] longValue];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapPath::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_strategy");
            }
        
            // args
            // jsonable arg
            NSString* strategy = (NSString*) args[@"strategy"];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.strategy = strategy;
            methodResult(@"success");
        },
        
        @"AMapPath::set_steps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_steps");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* stepsRefArray = (NSArray<NSNumber*> *) args[@"steps"];
            NSMutableArray<NSArray<AMapStep*>*>* steps = [NSMutableArray arrayWithCapacity:stepsRefArray.count];
            for (int __i__ = 0; __i__ < stepsRefArray.count; __i__++) {
                NSArray<AMapStep*>* item = (NSArray<AMapStep*>*) HEAP[[stepsRefArray objectAtIndex:__i__]];
                [steps addObject:item];
            }
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.steps = steps;
            methodResult(@"success");
        },
        
        @"AMapPath::set_tolls": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_tolls");
            }
        
            // args
            // jsonable arg
            CGFloat tolls = [args[@"tolls"] floatValue];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tolls = tolls;
            methodResult(@"success");
        },
        
        @"AMapPath::set_tollDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_tollDistance");
            }
        
            // args
            // jsonable arg
            NSInteger tollDistance = [args[@"tollDistance"] longValue];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tollDistance = tollDistance;
            methodResult(@"success");
        },
        
        @"AMapPath::set_totalTrafficLights": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_totalTrafficLights");
            }
        
            // args
            // jsonable arg
            NSInteger totalTrafficLights = [args[@"totalTrafficLights"] longValue];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.totalTrafficLights = totalTrafficLights;
            methodResult(@"success");
        },
        
        @"AMapPath::set_restriction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPath::set_restriction");
            }
        
            // args
            // jsonable arg
            NSInteger restriction = [args[@"restriction"] longValue];
        
            // ref
            AMapPath* ref = (AMapPath*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.restriction = restriction;
            methodResult(@"success");
        },
        
        @"AMapFutureTimeInfoElement::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfoElement::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] longValue];
        
            // ref
            AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapFutureTimeInfoElement::set_pathindex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfoElement::set_pathindex");
            }
        
            // args
            // jsonable arg
            NSInteger pathindex = [args[@"pathindex"] longValue];
        
            // ref
            AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.pathindex = pathindex;
            methodResult(@"success");
        },
        
        @"AMapFutureTimeInfoElement::set_restriction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfoElement::set_restriction");
            }
        
            // args
            // jsonable arg
            NSInteger restriction = [args[@"restriction"] longValue];
        
            // ref
            AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.restriction = restriction;
            methodResult(@"success");
        },
        
        @"AMapFutureTimeInfoElement::set_tmcs": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfoElement::set_tmcs");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* tmcsRefArray = (NSArray<NSNumber*> *) args[@"tmcs"];
            NSMutableArray<NSArray<AMapTMC*>*>* tmcs = [NSMutableArray arrayWithCapacity:tmcsRefArray.count];
            for (int __i__ = 0; __i__ < tmcsRefArray.count; __i__++) {
                NSArray<AMapTMC*>* item = (NSArray<AMapTMC*>*) HEAP[[tmcsRefArray objectAtIndex:__i__]];
                [tmcs addObject:item];
            }
        
            // ref
            AMapFutureTimeInfoElement* ref = (AMapFutureTimeInfoElement*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tmcs = tmcs;
            methodResult(@"success");
        },
        
        @"AMapFutureTimeInfo::set_startTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfo::set_startTime");
            }
        
            // args
            // jsonable arg
            NSString* startTime = (NSString*) args[@"startTime"];
        
            // ref
            AMapFutureTimeInfo* ref = (AMapFutureTimeInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.startTime = startTime;
            methodResult(@"success");
        },
        
        @"AMapFutureTimeInfo::set_elements": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapFutureTimeInfo::set_elements");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* elementsRefArray = (NSArray<NSNumber*> *) args[@"elements"];
            NSMutableArray<NSArray<AMapFutureTimeInfoElement*>*>* elements = [NSMutableArray arrayWithCapacity:elementsRefArray.count];
            for (int __i__ = 0; __i__ < elementsRefArray.count; __i__++) {
                NSArray<AMapFutureTimeInfoElement*>* item = (NSArray<AMapFutureTimeInfoElement*>*) HEAP[[elementsRefArray objectAtIndex:__i__]];
                [elements addObject:item];
            }
        
            // ref
            AMapFutureTimeInfo* ref = (AMapFutureTimeInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.elements = elements;
            methodResult(@"success");
        },
        
        @"AMapWalking::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::set_origin");
            }
        
            // args
            // ref arg
            AMapGeoPoint* origin = (AMapGeoPoint*) HEAP[args[@"origin"]];
        
            // ref
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.origin = origin;
            methodResult(@"success");
        },
        
        @"AMapWalking::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::set_destination");
            }
        
            // args
            // ref arg
            AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[args[@"destination"]];
        
            // ref
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destination = destination;
            methodResult(@"success");
        },
        
        @"AMapWalking::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] longValue];
        
            // ref
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapWalking::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] longValue];
        
            // ref
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapWalking::set_steps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapWalking::set_steps");
            }
        
            // args
            // list arg
            NSArray<NSNumber*>* stepsRefArray = (NSArray<NSNumber*> *) args[@"steps"];
            NSMutableArray<NSArray<AMapStep*>*>* steps = [NSMutableArray arrayWithCapacity:stepsRefArray.count];
            for (int __i__ = 0; __i__ < stepsRefArray.count; __i__++) {
                NSArray<AMapStep*>* item = (NSArray<AMapStep*>*) HEAP[[stepsRefArray objectAtIndex:__i__]];
                [steps addObject:item];
            }
        
            // ref
            AMapWalking* ref = (AMapWalking*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.steps = steps;
            methodResult(@"success");
        },
        
        @"AMapTaxi::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::set_origin");
            }
        
            // args
            // ref arg
            AMapGeoPoint* origin = (AMapGeoPoint*) HEAP[args[@"origin"]];
        
            // ref
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.origin = origin;
            methodResult(@"success");
        },
        
        @"AMapTaxi::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::set_destination");
            }
        
            // args
            // ref arg
            AMapGeoPoint* destination = (AMapGeoPoint*) HEAP[args[@"destination"]];
        
            // ref
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.destination = destination;
            methodResult(@"success");
        },
        
        @"AMapTaxi::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::set_distance");
            }
        
            // args
            // jsonable arg
            NSInteger distance = [args[@"distance"] longValue];
        
            // ref
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"AMapTaxi::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::set_duration");
            }
        
            // args
            // jsonable arg
            NSInteger duration = [args[@"duration"] longValue];
        
            // ref
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"AMapTaxi::set_sname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::set_sname");
            }
        
            // args
            // jsonable arg
            NSString* sname = (NSString*) args[@"sname"];
        
            // ref
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.sname = sname;
            methodResult(@"success");
        },
        
        @"AMapTaxi::set_tname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapTaxi::set_tname");
            }
        
            // args
            // jsonable arg
            NSString* tname = (NSString*) args[@"tname"];
        
            // ref
            AMapTaxi* ref = (AMapTaxi*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.tname = tname;
            methodResult(@"success");
        },
        
    };
}

@end
